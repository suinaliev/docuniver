from django.db import models
from django.db.models import TextField
from django.contrib.auth.models import User
from django.utils import timezone


class Teacher(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    department = models.CharField(max_length=100, blank=True)
    position = models.CharField(max_length=100, blank=True)

    def __str__(self):
        return f"{self.user.get_full_name()} - {self.position}"

    class Meta:
        verbose_name = "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"
        verbose_name_plural = "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏"


class Category(models.Model):
    name = models.CharField(max_length=200, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    slug = models.SlugField(unique=True, verbose_name="–°–ª–∞–≥")
    description = models.TextField(blank=True, null=True, verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ")
    parent = models.ForeignKey('self', null=True, blank=True, related_name='children', on_delete=models.CASCADE, verbose_name="–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è")
    icon = models.CharField(max_length=50, default='fas fa-folder', verbose_name="–ò–∫–æ–Ω–∫–∞")
    color = models.CharField(max_length=7, default='#667eea', verbose_name="–¶–≤–µ—Ç")
    order = models.PositiveIntegerField(default=0, verbose_name="–ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏")
    is_active = models.BooleanField(default=True, verbose_name="–ê–∫—Ç–∏–≤–Ω–∞")
    created_at = models.DateTimeField(default=timezone.now)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        if self.parent:
            return f"{self.parent.name} ‚Üí {self.name}"
        return self.name

    def get_absolute_url(self):
        if self.parent:
            return f"/categories/{self.parent.slug}/{self.slug}/"
        return f"/categories/{self.slug}/"

    def get_level(self):
        level = 0
        parent = self.parent
        while parent:
            level += 1
            parent = parent.parent
        return level

    def get_children_count(self):
        return self.children.filter(is_active=True).count()

    def get_documents_count(self):
        count = self.documents.count()
        for child in self.children.filter(is_active=True):
            count += child.get_documents_count()
        return count

    class Meta:
        verbose_name = "–ö–∞—Ç–µ–≥–æ—Ä–∏—è"
        verbose_name_plural = "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏"
        ordering = ['order', 'name']


class Document(models.Model):
    name = models.CharField(max_length=200, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ")
    document = models.FileField(upload_to='documents/', null=True, blank=True, verbose_name="–§–∞–π–ª")
    category = models.ForeignKey(Category, on_delete=models.CASCADE, related_name='documents', verbose_name="–ö–∞—Ç–µ–≥–æ—Ä–∏—è", null=True, blank=True)
    index = models.CharField(max_length=20, null=True, blank=True, verbose_name="–ò–Ω–¥–µ–∫—Å")
    timestore = models.CharField(max_length=20, null=True, blank=True, verbose_name="–°—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è")
    notes = models.TextField(null=True, blank=True, verbose_name="–ü—Ä–∏–º–µ—á–∞–Ω–∏—è")
    tags = models.CharField(max_length=500, blank=True, null=True, verbose_name="–¢–µ–≥–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)")
    is_important = models.BooleanField(default=False, verbose_name="–í–∞–∂–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç")
    created_by = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True, verbose_name="–°–æ–∑–¥–∞–ª")
    created_at = models.DateTimeField(default=timezone.now)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return self.name

    def get_file_type(self):
        if self.document:
            ext = self.document.name.split('.')[-1].lower()
            if ext == 'pdf':
                return {'icon': 'üìï', 'type': 'PDF'}
            elif ext in ['doc', 'docx']:
                return {'icon': 'üìò', 'type': 'Word'}
            elif ext in ['xls', 'xlsx']:
                return {'icon': 'üìó', 'type': 'Excel'}
            elif ext in ['ppt', 'pptx']:
                return {'icon': 'üìô', 'type': 'PowerPoint'}
            elif ext in ['jpg', 'jpeg', 'png', 'gif']:
                return {'icon': 'üñºÔ∏è', 'type': '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'}
            elif ext in ['zip', 'rar', '7z']:
                return {'icon': 'üì¶', 'type': '–ê—Ä—Ö–∏–≤'}
            else:
                return {'icon': 'üìÑ', 'type': '–î–æ–∫—É–º–µ–Ω—Ç'}
        return {'icon': 'üìÑ', 'type': '–ë–µ–∑ —Ñ–∞–π–ª–∞'}

    def get_tags_list(self):
        if self.tags:
            return [tag.strip() for tag in self.tags.split(',') if tag.strip()]
        return []

    class Meta:
        verbose_name = "–î–æ–∫—É–º–µ–Ω—Ç"
        verbose_name_plural = "–î–æ–∫—É–º–µ–Ω—Ç—ã"
        ordering = ['-created_at']


class Page(models.Model):
    title = models.CharField(max_length=200)
    slug = models.SlugField(unique=True)
    content = TextField(blank=True, null=True)
    parent = models.ForeignKey('self', null=True, blank=True, related_name='children', on_delete=models.CASCADE)
    show_like_document = models.BooleanField(default=False)
    created_at = models.DateTimeField(default=timezone.now)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return self.title

    def get_absolute_url(self):
        if self.parent:
            return f"{self.parent.get_absolute_url()}/{self.slug}"
        return f"/{self.slug}"

    class Meta:
        verbose_name = "–°—Ç—Ä–∞–Ω–∏—Ü–∞"
        verbose_name_plural = "–°—Ç—Ä–∞–Ω–∏—Ü—ã"
        ordering = ['title']


class File(models.Model):
    page = models.ForeignKey(Page, related_name='documents', on_delete=models.CASCADE)
    title = models.CharField(max_length=255)
    file = models.FileField(upload_to='documents/',  blank=True, null=True)
    show_like_sub_document = models.BooleanField(default=False)
    created_at = models.DateTimeField(default=timezone.now)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return self.title

    class Meta:
        verbose_name = "–§–∞–π–ª"
        verbose_name_plural = "–§–∞–π–ª—ã"
        ordering = ['-created_at']


class StudentAchievement(models.Model):
    ACHIEVEMENT_TYPES = [
        ('olympiad', '–û–ª–∏–º–ø–∏–∞–¥–∞'),
        ('certificate', '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç'),
        ('award', '–ù–∞–≥—Ä–∞–¥–∞'),
        ('other', '–î—Ä—É–≥–æ–µ'),
    ]

    student_name = models.CharField(max_length=255, verbose_name='–§–ò–û —Å—Ç—É–¥–µ–Ω—Ç–∞')
    group = models.CharField(max_length=50, verbose_name='–ì—Ä—É–ø–ø–∞')
    photo = models.ImageField(upload_to='achievements/photos/', blank=True, null=True, verbose_name='–§–æ—Ç–æ —Å—Ç—É–¥–µ–Ω—Ç–∞')
    achievement_type = models.CharField(max_length=20, choices=ACHIEVEMENT_TYPES, verbose_name='–¢–∏–ø –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è')
    title = models.CharField(max_length=255, verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è')
    description = models.TextField(blank=True, verbose_name='–û–ø–∏—Å–∞–Ω–∏–µ')
    date_received = models.DateField(verbose_name='–î–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è')
    is_important = models.BooleanField(default=False, verbose_name='–í–∞–∂–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ')
    document = models.FileField(upload_to='achievements/documents/', blank=True, null=True, verbose_name='–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç')
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        verbose_name = '–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞'
        verbose_name_plural = '–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤'
        ordering = ['-date_received']

    def __str__(self):
        return f"{self.student_name} - {self.title}"


class MobilityProgram(models.Model):
    PROGRAM_TYPES = [
        ('exchange', '–ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ–±–º–µ–Ω–∞'),
        ('internship', '–°—Ç–∞–∂–∏—Ä–æ–≤–∫–∞'),
        ('practice', '–ü—Ä–∞–∫—Ç–∏–∫–∞'),
        ('other', '–î—Ä—É–≥–æ–µ'),
    ]

    title = models.CharField(max_length=255, verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã')
    program_type = models.CharField(max_length=20, choices=PROGRAM_TYPES, verbose_name='–¢–∏–ø –ø—Ä–æ–≥—Ä–∞–º–º—ã')
    university = models.CharField(max_length=255, verbose_name='–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç/–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è')
    country = models.CharField(max_length=100, verbose_name='–°—Ç—Ä–∞–Ω–∞')
    description = models.TextField(verbose_name='–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã')
    requirements = models.TextField(verbose_name='–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º')
    duration = models.CharField(max_length=100, verbose_name='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å')
    start_date = models.DateField(verbose_name='–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞')
    end_date = models.DateField(verbose_name='–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è')
    is_active = models.BooleanField(default=True, verbose_name='–ê–∫—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞')
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"{self.title} - {self.university} ({self.country})"

    class Meta:
        verbose_name = '–ü—Ä–æ–≥—Ä–∞–º–º–∞ –º–æ–±–∏–ª—å–Ω–æ—Å—Ç–∏'
        verbose_name_plural = '–ü—Ä–æ–≥—Ä–∞–º–º—ã –º–æ–±–∏–ª—å–Ω–æ—Å—Ç–∏'
        ordering = ['-start_date']


class MobilityMedia(models.Model):
    MEDIA_TYPES = [
        ('photo', '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è'),
        ('video', '–í–∏–¥–µ–æ'),
    ]

    program = models.ForeignKey(MobilityProgram, on_delete=models.CASCADE, related_name='media', verbose_name='–ü—Ä–æ–≥—Ä–∞–º–º–∞')
    media_type = models.CharField(max_length=10, choices=MEDIA_TYPES, verbose_name='–¢–∏–ø –º–µ–¥–∏–∞')
    title = models.CharField(max_length=255, verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ')
    description = models.TextField(blank=True, verbose_name='–û–ø–∏—Å–∞–Ω–∏–µ')
    file = models.FileField(upload_to='mobility/media/', verbose_name='–§–∞–π–ª')
    video_url = models.URLField(blank=True, verbose_name='–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ (YouTube, Vimeo)')
    order = models.PositiveIntegerField(default=0, verbose_name='–ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è')
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"{self.get_media_type_display()} - {self.title}"

    class Meta:
        verbose_name = '–ú–µ–¥–∏–∞ –º–æ–±–∏–ª—å–Ω–æ—Å—Ç–∏'
        verbose_name_plural = '–ú–µ–¥–∏–∞ –º–æ–±–∏–ª—å–Ω–æ—Å—Ç–∏'
        ordering = ['order', '-created_at']